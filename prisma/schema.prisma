// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique
  username String @unique
  employeeId String @unique
  phone String? @unique

  firstname String
  lastname String
  othernames String?
  status String
  password String

  role Role
  
  departments Department[]
  tokens Token[]

  transactions Transaction[]
  loanDetails LoanDetail[]
}

enum Role{
  USER
  ADMIN
  SUPERADMIN
}

enum Gender{
  MALE
  FEMALE
}

enum AccountStatus{
  ACTIVE
  DISABLED
  CLOSED
}

enum LoanStatus{
  NOT_LOANED
  DUE
  OVERDUE
  PAID
  PENDING
}

enum LoanState{
  NEW
  GRANTED
  UNGRANTED
  CLOSED
}

enum TransactionType{
  DEPOSITE
  DEBIT
  LOAN_PAYMENT
}

model Department{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  office String @unique
  state String

  users Client[]
}

model Token{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type String
  isValid Boolean @default(true)

  expiresAt DateTime

  userId Int 
  user Client @relation(fields: [userId], references: [id])
}

model Saving{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance Float @default(0)

  account String @unique
  email String @unique
  phone String? @unique
  
  firstname String
  lastname String
  othernames String?
  dateOfBirth DateTime
  registration Float? @default(0)
  card String?

  status AccountStatus
  gender Gender
  
  work Work?
  address Address?
  nextOfKin NextOfKin?
  family Family?

  sponsoring Loan[]
  guaranted Guarantor[]
  transactions Transaction[]
}

model Loan{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance Float @default(0)

  account String @unique
  email String
  phone String?
  card String?
  
  firstname String
  lastname String
  othernames String?
  dateOfBirth DateTime
  purpose String?

  status LoanStatus
  gender Gender

  sponser Int? 
  saving Saving? @relation(fields: [sponser], references: [id])
  
  work Work?
  address Address?
  guarantor Guarantor[]
  transactions Transaction[]

  loanDetail LoanDetail?
}

model Work{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String?

  occupation String
  company String?
  location String?

  savingId Int? @unique
  savingAccount Saving? @relation(fields: [savingId], references: [id])

  loanId Int? @unique
  account Loan? @relation(fields: [loanId], references: [id])
}

model Address{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  residentialAddress String
  homeTown String
  city String
  region String
  country String
  nationality String
  digital String?
  
  savingId Int? @unique
  savingAccount Saving? @relation(fields: [savingId], references: [id])

  loanId Int? @unique
  account Loan? @relation(fields: [loanId], references: [id])
}

model Transaction{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Float
  previousAmount Float
  balanceAmount Float
  description String
  receipt String?
  cheque String?

  type TransactionType

  savingId Int? 
  savingAccount Saving? @relation(fields: [savingId], references: [id])

  loanId Int?
  account Loan? @relation(fields: [loanId], references: [id])

  transactedBy Int
  user Client @relation(fields: [transactedBy], references: [id])
}

model NextOfKin{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  firstname String
  lastname String
  othernames String?
  relation String
  phone String?
  occupation String
  residentialAddress String

  accountId Int @unique
  saving Saving @relation(fields: [accountId], references: [id])
}

model Family{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  maritalStatus String
  spouseName String?
  noOfChildren Int @default(0)

  savingId Int @unique
  saving Saving @relation(fields: [savingId], references: [id])
}

model Guarantor{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Float?

  savingId Int
  saving Saving @relation(fields: [savingId], references: [id])

  loanId Int
  loan Loan @relation(fields: [loanId], references: [id])

}

model LoanDetail{
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  amount Float
  interestPercent Float
  interest Float
  appliedAt DateTime
  dueAt DateTime
  modeOfPayment String

  state LoanState

  loanId Int @unique
  loan Loan @relation(fields: [loanId], references: [id])

  grantedBy Int?
  user Client? @relation(fields: [grantedBy], references: [id])
}
